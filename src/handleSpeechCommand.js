import { echo } from './input';
import { send } from './websock';

const voiceCommands = [
  {
    match: /^—Å–±–µ–∂–∞—Ç—å$/,
    buildCommand: () => '—Å–±–µ–∂–∞—Ç—å',
  },
  {
    match: /^—Å–Ω—è—Ç—å$/,
    buildCommand: () => '–∫ —Å–Ω—è—Ç –≤–æ–∑',
  },
  {
    match: /^–æ–ø–æ–∑–Ω–∞—Ç—å\s+(.+)/i,
    buildCommand: (_, match) => `–∫ –æ–ø–æ–∑ ${match[1]}`,
  },
  {
    match: /^–∏—Å–ø—Ä–∞–≤–∏—Ç—å\s+(.+)/i,
    buildCommand: (_, match) => `–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å ${match[1]}`,
  },
];

export function handleSpeechCommand(transcript, setValue) {
  const normalized = transcript.trim().toLowerCase();
  console.log('üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', normalized);

  for (const { match, buildCommand } of voiceCommands) {
    const matchResult = normalized.match(match);
    if (matchResult) {
      const command = buildCommand(normalized, matchResult);
      echo(command);
      send(command);
      setValue('');
      return true;
    }
  }

  return false;
}
